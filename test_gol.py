import pytest
from gol import GameOfLife

@pytest.mark.parametrize(('board', 'expected'), [
    ([['.','.','.'],['.','.','.'],['.','.','.']], (3, 3)),
    ([['.','.','.'],['.','.','.']], (2, 3)),
    ([['.','.','.','.'],['.','.','.','.']], (2, 4)),
])
def test_board_dimention(board, expected):
    gol = GameOfLife(board)
    assert (gol.height, gol.width) == expected

@pytest.mark.parametrize(('board', 'pos', 'expected'), [
    ([['.','.','.'],['.','.','.'],['.','.','.']], (1, 1), 0),
    ([['.','.','*'],['*','.','.'],['.','.','.']], (1, 1), 2),
    ([['.','.','*'],['*','*','.'],['.','.','.']], (1, 1), 2),
    ([['.','.','*'],['*','*','.'],['.','*','*']], (1, 1), 4),
    ([['.','.','*'],['*','*','.'],['.','*','*']], (0, 0), 2),
    ([['.','.','*'],['*','*','.'],['.','*','*']], (2, 2), 2),
    ([['.','.','*'],['*','*','.'],['.','*','*']], (1, 2), 4),
])
def test_count_live_neighbors(board, pos, expected):
    gol = GameOfLife(board)
    value = gol.count_live_neighbors(pos)
    assert value == expected
    
@pytest.mark.parametrize(('board', 'pos', 'expected'), [
    ([['.','.','.'],['.','.','.'],['.','.','.']], (1, 1), '.'),
    ([['.','.','.'],['.','.','.'],['.','.','*']], (1, 1), '.'),
    ([['.','.','.'],['.','.','.'],['.','*','*']], (1, 1), '.'),
    ([['.','.','.'],['.','.','*'],['.','*','*']], (1, 1), '*'),
    ([['.','.','.'],['.','*','*'],['.','*','*']], (1, 1), '*'),
    ([['.','.','.'],['.','*','.'],['.','.','*']], (1, 1), '.'),
    ([['.','*','*'],['.','*','.'],['.','*','*']], (1, 1), '.'),
])
def test_next_cell_should_return_expected(board, pos, expected):
    gol = GameOfLife(board)
    value = gol.get_next_cell(pos)
    assert value == expected


@pytest.mark.parametrize(('board', 'expected'), [
    ([['.','.','.'],['.','.','.'],['.','.','.']],
     [['.','.','.'],['.','.','.'],['.','.','.']]),
    ([['.','.','.'],['.','*','.'],['.','.','.']],
     [['.','.','.'],['.','.','.'],['.','.','.']]),
    ([[".",".",".",".",".",".",".","."],
      [".",".",".",".","*",".",".","."],
      [".",".",".","*","*",".",".","."],
      [".",".",".",".",".","*",".","."]],
        [[".",".",".",".",".",".",".","."],
        [".",".",".","*","*",".",".","."],
        [".",".",".","*","*","*",".","."],
        [".",".",".",".","*",".",".","."]]),
     
])
def test_next_generation_should_return_expected(board, expected):
    gol = GameOfLife(board)
    value = gol.next_generation()
    assert value == expected